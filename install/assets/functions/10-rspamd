#!/usr/bin/with-contenv bash

nameserver_ready() {
    print_debug "Checking to see if Nameserver Host: ${NAMESERVER} is accessible"
    COUNTER=0
    while ! (silent nc -z ${NAMESERVER} 53) ; do
        sleep 5
        let COUNTER+=5
        print_warn "Nameserver Host '${NAMESERVER}' is not accessible, retrying.. ($COUNTER seconds so far)"
    done

}
clam_ready() {
    print_debug "Checking to see if ClamAV Host: ${CLAMAV_HOST} is accessible"
    COUNTER=0
    while ! (silent nc -z ${CLAMAV_HOST} ${CLAMAV_PORT}) ; do
        sleep 5
        let COUNTER+=5
        print_warn "Clamav Host '${CLAMAV_HOST}' is not accessible, retrying.. ($COUNTER seconds so far)"
    done
}

configure_antivirus() {
	if var_true $ENABLE_ANTIVIRUS ; then
		clam_ready
		if [ "$SETUP_TYPE" = "AUTO" ]; then
		    print_notice "Configuring Antivirus (${ANTIVIRUS_TYPE}) Filtering"
			
			if [ -n "$CLAMAV_PORT" ] ; then
				clamav_port=":${CLAMAV_PORT}"
			fi

			cat <<EOF > /etc/rspamd/local.d/antivirus.conf
## Custom Generated Clam Antivirus Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

  ${ANTIVIRUS_TYPE} {
	  action = "${ANTIVIRUS_ACTION}";
	  scan_mime_parts = ${ANTIVIRUS_ATTACHMENTS_ONLY};
	  max_size = ${ANTIVIRUS_MAX_SIZE};
	  symbol = "CLAM_VIRUS";
	  type = "${ANTIVIRUS_TYPE}";
	  log_clean = ${ANTIVIRUS_LOG_CLEAN};
	  servers = "${CLAMAV_HOST}${clamav_port}";
	  patterns {
	    JUST_EICAR = "^Eicar-Test-Signature$";
	  }
	  whitelist = "${CONFIG_PATH}${WHITELIST_ANTIVIRUS}";
  }
 
  .include(try=true,priority=5) "${DBDIR}/dynamic/antivirus.conf"
  .include(try=true,priority=10) "$LOCAL_CONFDIR/override.d/antivirus.conf"
EOF
		fi
	fi  
}

configure_asn() {
	if var_true $ENABLE_ASN ; then
		if [ "$SETUP_TYPE" = "AUTO" ]; then
		    print_notice "Configuring ASN"	
			cat <<EOF > /etc/rspamd/local.d/asn.conf
## Custom Generated ASN Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

provider_type = "rspamd";
provider_info {
  ip4 = "asn.rspamd.com";
  ip6 = "asn6.rspamd.com";
}
symbol = "ASN";
EOF
		fi
	fi
}

## Configure Bayesian
configure_classifier_bayesian() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Bayesian Filtering"
		cat <<EOF > /etc/rspamd/local.d/classifier_bayes.conf
## Custom Generated Classifier: Bayesian Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

backend = "redis";
new_schema = ${BAYESIAN_NEW_SCHEMA}
expire = ${BAYESIAN_EXPIRE};
min_learns = ${BAYESIAN_MIN_LEARNS};
store_tokens = ${BAYESIAN_STORE_TOKENS};
signatures = ${BAYESIAN_SIGNATURES};
 
# enable autolearn here if you want it:
autolearn = ${BAYESIAN_AUTOLEARN};
autolearn {
  spam_threshold = ${BAYESIAN_AUTOLEARN_SPAM_THRESHOLD}; # When to learn spam (score >= threshold)
  ham_threshold = ${BAYESIAN_AUTOLEARN_HAM_THRESHOLD}; # When to learn ham (score <= threshold)
  check_balance = ${BAYESIAN_AUTOLEARN_CHECK_BALANCE}; # Check spam and ham balance
  min_balance = ${BAYESIAN_AUTOLEARN_MIN_BALANCE};    # Keep diff for spam/ham learns for at least this value
}
EOF
	fi
}

configure_controller() {
	if var_true $ENABLE_CONTROLLER ; then
		if [ "$SETUP_TYPE" = "AUTO" ]; then
	    	print_notice "Configuring Controller"
    		secure_ip_array=$(echo $CONTROLLER_SECURE_IPS | tr "," "\n")
			for ip in $secure_ip_array
			do
    			secure_ip="${secure_ip}
    			"$(cat <<EOF

secure_ip "${ip}";



EOF
										)
			done
			cat <<EOF > /etc/rspamd/local.d/worker-controller.inc
## Custom Generated Controller Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`
bind_socket = "${CONTROLLER_LISTEN_IP}:${CONTROLLER_LISTEN_PORT}";
count=${CONTROLLER_COUNT}
enable_password = "${CONTROLLER_PASS}";
${secure_ip}
EOF
		fi
	fi
}

configure_data_dir() {
	### Set Permissions
	mkdir -p ${RSPAMD_DATA_LOCATION}
	mkdir -p ${RSPAMD_DATA_LOCATION}/dynamic
	chown -R rspamd:rspamd ${RSPAMD_DATA_LOCATION}
	rm -rf /var/lib/rspamd
	ln -sf ${RSPAMD_DATA_LOCATION} /var/lib/rspamd
}

configure_dmarc() {
	if var_true $ENABLE_DMARC ; then
		if [ "$SETUP_TYPE" = "AUTO" ]; then
			print_debug "Configuring DMARC"
			if var_true $DMARC_ENABLE_REPORTING ; then
				if var_true $DMARC_SEND_REPORTS ; then
	    			dmarc_report_settings=$(cat <<EOF
send_reports = ${DMARC_SEND_REPORTS};
report_settings {
  org_name = "${DMARC_ORG_NAME}";
  domain = "${DMARC_DOMAIN}";
  email = "${DMARC_EMAIL}";
  from_name = "${DMARC_FROM_NAME}";
  smtp = "${DMARC_SMTP_HOST}";
  smtp_port = ${DMARC_SMTP_PORT};
  helo = "${DMARC_SMTP_HELO}";
  retries = ${DMARC_SMTP_RETRIES};
}
EOF
										)
				fi
			fi

			cat <<EOF > /etc/rspamd/local.d/dmarc.conf
## Custom Generated DMARC Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`
reporting = ${DMARC_ENABLE_REPORTING};
${dmarc_report_settings}
EOF
		fi
	fi

}

configure_dkim() {
	if var_true $ENABLE_DKIM ; then
		mkdir -p ${RSPAMD_DATA_LOCATION}/dkim
		chown -R rspamd:rspamd ${RSPAMD_DATA_LOCATION}/dkim
		if [ "$SETUP_TYPE" = "AUTO" ]; then
	    	print_notice "Configuring DKIM"

	    	if [ -z "$DKIM_SELECTOR" ] ; then
	            if [ ! -f ${RSPAMD_DATA_LOCATION}/dkim/selectors ]; then
	                print_debug "DKIM: Randomly generating DKIM selector name"
	                DKIM_SELECTOR=${DKIM_SELECTOR:-"$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)"}
	                cat <<EOF > ${RSPAMD_DATA_LOCATION}/dkim/selectors
## This is a list of selectors for DKIM Don't delete this file.
## Generated on $(date)

Selector: ${DKIM_SELECTOR} generated on $(date)

EOF
	            else
	            	DKIM_SELECTOR=${DKIM_SELECTOR:-"$(cat ${RSPAMD_DATA_LOCATION}/dkim/selectors | grep "Selector:" | awk '{print $2}')"}
	            fi
   		    fi

   		    if [ ! -f ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}.key ] ; then
   		    	sudo -u rspamd rspamadm dkim_keygen -b ${DKIM_KEY_SIZE} -s ${DKIM_SELECTOR} -k ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}.key > ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}-dns.txt
   		    	print_notice "***"
   		    	print_notice "DKIM: Key generated - You must add this entry to your Nameserver to complete the step"
   		    	cat ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}-dns.txt
   		    	print_notice "It can also be found at ${RSPAMD_DATA_LOCATION}/dkim/${DKIM_SELECTOR}-dns.txt"
   		    	print_notice "***"
   		    	chmod 440 ${RSPAMD_DATA_LOCATION}/dkim/*
   		    fi

			cat <<EOF > /etc/rspamd/local.d/dkim_signing.conf
## Custom Generated DKIM Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

path = "${RSPAMD_DATA_LOCATION}/dkim/\$selector.key";
selector = "${DKIM_SELECTOR}";
allow_envfrom_empty = ${DKIM_ALLOW_ENVFROM_EMPTY};
allow_hdrfrom_mismatch = ${DKIM_ALLOW_HDRFROM_MISMATCH};
allow_hdrfrom_multiple = ${DKIM_ALLOW_HDRFROM_MULTIPLE};
allow_username_mismatch = ${DKIM_ALLOW_USERNAME_MISMATCH};
auth_only = ${DKIM_AUTH_ONLY};
sign_local = ${DKIM_SIGN_LOCAL};
symbol = "DKIM_SIGNED";
try_fallback = ${DKIM_TRY_FALLBACK};
use_esld = ${DKIM_USE_ESLD};
use_redis = true;
EOF

			if var_true $ENABLE_ARC ; then
				print_notice "Configuring ARC"
				cat <<EOF > /etc/rspamd/local.d/arc.conf
## Custom Generated ARC Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

path = "${RSPAMD_DATA_LOCATION}/dkim/\$selector.key";
selector = "${DKIM_SELECTOR}";

allow_envfrom_empty = ${ARC_ALLOW_ENVFROM_EMPTY};
allow_hdrfrom_mismatch = ${ARC_ALLOW_HDRFROM_MISMATCH};
allow_hdrfrom_multiple = ${ARC_ALLOW_HDRFROM_MULTIPLE};
allow_username_mismatch = ${ARC_ALLOW_USERNAME_MISMATCH};
auth_only = ${ARC_AUTH_ONLY};
key_prefix = "ARC_KEYS";
sign_inbound = ${ARC_SIGN_INBOUND};
sign_local = ${ARC_SIGN_LOCAL};
symbol = "ARC_SIGNED";
try_fallback = ${ARC_TRY_FALLBACK};
use_domain = "${ARC_USE_DOMAIN}";
use_domain_sign_inbound = "${ARC_USE_DOMAIN_SIGN_INBOUND}";
use_esld = ${ARC_USE_ESLD};
use_redis = true;
EOF
			fi
		fi

	fi
}

configure_greylist() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Greylist"
		cat <<EOF > /etc/rspamd/local.d/greylist.conf
## Custom Generated Redis History Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`
enabled = ${ENABLE_GREYLIST};
EOF

	fi
}

configure_history() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Redis History"
		cat <<EOF > /etc/rspamd/local.d/history_redis.conf
## Custom Generated Redis History Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

nrows = ${HISTORY_ROWS_LIMIT};
compress = ${HISTORY_COMPRESS};
subject_privacy = ${HISTORY_SUBJECT_PRIVACY};

EOF
	fi
}

configure_logging() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Logging"

		debug_log_array=$(echo ${LOG_DEBUG_MODULES} | tr "," "\n")
		counter=1
		for module in $debug_log_array
		do
			if [ "$counter" -gt "1" ]; then
				comma=","
			fi
			debug_modules=${debug_modules}${comma}\"${module}\"
			let counter+=1
		done

		if [ "${LOG_TYPE}" = "FILE" ] || [ "${LOG_TYPE}" = "file" ] ; then
			mkdir -p ${LOG_LOCATION}
			touch ${LOG_LOCATION}${LOG_FILE}
			chown -R rspamd: ${LOG_LOCATION}${LOG_FILE}
			sed -i "s#<LOG_LOCATION>#${LOG_LOCATION}#g" /etc/logrotate.d/rspamd
			log_type="file"
		else
			log_type="console"
		fi

		cat <<EOF > /etc/rspamd/local.d/logging.inc
## Custom Generated Logging Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

type = '${log_type}';
filename = '${LOG_LOCATION}${LOG_FILE}';
level = '${LOG_LEVEL}';
color = ${LOG_CONSOLE_COLORIZE};
log_usec = ${LOG_USEC}
debug_modules = [${debug_modules}]
EOF
	fi
}

configure_milter() {
	if var_true $ENABLE_MILTER ; then
		if [ "$SETUP_TYPE" = "AUTO" ]; then
		    print_notice "Configuring Milter"
			cat <<EOF > /etc/rspamd/local.d/milter_headers.conf
## Custom Generated Milter Headers Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

authenticated_headers = ["authentication-results"];
use = ["x-spamd-result","x-spam-level","x-spamd-bar", "my-x-spam-score","x-spam-status", "authentication-results"];
 
# add X-Spam-Score header (like SA does)
# Source: https://groups.google.com/forum/#!topic/rspamd/fEdbnG0J18I
custom {
   my-x-spam-score = <<EOD
     return function(task, common_meta)
       local sc = common_meta['metric_score'] or task:get_metric_score()
       -- return no error
       return nil,
       -- header(s) to add
       {['X-Spam-Score'] = string.format('%.2f', sc[1])},
       -- header(s) to remove
       {['X-Spam-Score'] = 1},
       -- metadata to store
       {}
   end
EOD;
}
EOF
			cat <<EOF > /etc/rspamd/override.d/milter_headers.conf
extended_spam_headers=${MILTER_EXTENDED_SPAM_HEADERS}
EOF
		fi
	fi
}

configure_mx_check() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring MX Checking"
		cat <<EOF > /etc/rspamd/local.d/mx_check.conf
## Custom Generated MX Check Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`
enabled = ${ENABLE_MX_CHECK};
timeout = ${MX_CHECK_TIMEOUT};
symbol_bad_mx = "MX_INVALID";
symbol_no_mx = "MX_MISSING";
symbol_good_mx = "MX_GOOD";
expire = ${MX_CHECK_EXPIRE};
key_prefix = "rmx";
EOF
	fi
}

configure_neural() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Neural Training"
	    cat <<EOF > /etc/rspamd/local.d/neural.conf
enabled = ${ENABLE_NEURAL};

train {
  max_train = ${NEURAL_MAX_TRAIN}; # Number ham/spam samples needed to start train
  max_usages = ${NEURAL_MAX_USAGES}; # Number of learn iterations while ANN data is valid was 20
  learning_rate = ${NEURAL_LEARNING_RATE}; # Rate of learning
  max_iterations = ${NEURAL_MAX_ITERATIONS}; # Maximum iterations of learning (better preciseness but also lower speed of learning)
}

ann_expire = ${NEURAL_ANN_EXPIRE}; # For how long ANN should be preserved in Redis
EOF
	fi
}

configure_redis() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Redis"
		[[ -n "$REDIS_PASS" ]] && $redis_pass='password = "'$REDIS_PASS'";'
		cat <<EOF > /etc/rspamd/local.d/redis.conf
## Custom Generated Redis Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

servers = "${REDIS_HOST}:${REDIS_PORT}";
timeout = "${REDIS_TIMEOUT}";
db = "${REDIS_DB}";
${REDIS_PASS}
EOF
	fi
}

configure_phishing() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Phishing"
		cat <<EOF > /etc/rspamd/local.d/phishing.conf
## Custom Generated Phishing Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

openphish_enabled = ${PHISHING_ENABLE_OPENPHISH};
openphish_map     = "${PHISHING_OPENPHISH_FEED}";
openphish_premium = ${PHISHING_OPENPHISH_PREMIUM};
phishtank_enabled = ${PHISHING_ENABLE_PHISHTANK};
EOF
	fi
}

configure_repuation() {
	if var_true $ENABLE_REPUTATION ; then
		if [ "$SETUP_TYPE" = "AUTO" ]; then
		    print_notice "Configuring Reputation"
			cat <<EOF > /etc/rspamd/local.d/reputation.conf
## Custom Generated Repuation Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

rules {
  ip_reputation = {
    selector "ip" {
    }
    backend "redis" {
    }

    symbol = "IP_REPUTATION";
  }
  spf_reputation =  {
    selector "spf" {
    }
    backend "redis" {
    }

    symbol = "SPF_REPUTATION";
  }
  dkim_reputation =  {
    selector "dkim" {
    }
    backend "redis" {
    }

    symbol = "DKIM_REPUTATION"; # Also adjusts scores for DKIM_ALLOW, DKIM_REJECT
  }
  generic_reputation =  {
    selector "generic" {
      selector = "ip"; # see https://rspamd.com/doc/configuration/selectors.html
    }
    backend "redis" {
    }

    symbol = "GENERIC_REPUTATION";
  }
}
EOF
		fi
	fi
}

configure_rspamd_options() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring RSpamD Options"
		cat <<EOF > /etc/rspamd/local.d/mx_check.conf
## Custom Generated URL Tags Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

local_addrs = "${LOCAL_IPS}";
EOF

		cat <<EOF > /etc/rspamd/override.d/actions.conf
## Custom Generated Actions Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

actions {
	add_header = ${METRICS_ADD_HEADER};
	greylist = ${METRICS_GREYLIST};
	reject = ${METRICS_REJECT};
	rewrite_subject = ${METRICS_REWRITE_SUBJECT};
	subject = "${REWRITE_SUBJECT}";
}

EOF

		cat <<EOF > /etc/rspamd/override.d/worker-normal.inc
## Custom Generated Worker Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

bind_socket = "${WORKER_LISTEN_IP}:${WORKER_LISTEN_PORT}";

EOF
		if [ "${NAMESERVER}" != "127.0.0.1" ] ; then
			nameserver_ready
        	print_debug "Setting Custom Nameserver"
			cat <<EOF > /etc/rspamd/local.d/options.inc
dns {
  nameserver = ["${NAMESERVER}"];
  timeout = ${NAMESERVER_TIMEOUT};

}
EOF
		fi
	fi
}

configure_spamtrap() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring Spamtrap"
		cat <<EOF > /etc/rspamd/local.d/spamtrap.conf
## Custom Generated Spamtrap Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

enabled = ${ENABLE_SPAMTRAP};
action = "${SPAMTRAP_ACTION}";
score = ${SPAMTRAP_SCORE};
learn_fuzzy = ${SPAMTRAP_LEARN_FUZZY};
learn_spam = ${SPAMTRAP_LEARN_SPAM};
map = file://$LOCAL_CONFDIR/maps.d/spamtrap.map;
EOF
	fi
}

configure_url_reputation() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring URL Reputation Checking"
		cat <<EOF > /etc/rspamd/local.d/url_reputation.conf
## Custom Generated URL Reputation Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

enabled = ${ENABLE_URL_REPUTATION};
EOF
	fi

}

configure_url_tags() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
	    print_notice "Configuring URL Tags Checking"
		cat <<EOF > /etc/rspamd/local.d/mx_check.conf
## Custom Generated URL Tags Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

enabled = ${ENABLE_URL_TAGS};
EOF
	fi
}

configure_worker_fuzzy() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
    	print_notice "Configuring Worker: Fuzzy"
		fuzzy_ip_array=$(echo $WORKER_FUZZY_ALLOW_UPDATE_IPS | tr "," "\n")
		counter=1
		for ip in $fuzzy_ip_array
		do
			if [ "$counter" -gt "1" ]; then
				comma=","
			fi
			fuzzy_ip=${fuzzy_ip}${comma}\"${ip}\"
			let counter+=1
    		done
		cat <<EOF > /etc/rspamd/local.d/worker-fuzzy.inc
## Custom Generated Worker Fuzzy Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

count = ${WORKER_FUZZY_COUNT};
backend = "redis";
expire = ${WORKER_FUZZY_EXPIRE};
allow_update = ["127.0.0.1", "::1"];
EOF
	fi
}

configure_worker_proxy() {
	if [ "$SETUP_TYPE" = "AUTO" ]; then
    	print_notice "Configuring Worker: Proxy"
		#cat <<EOF > /etc/rspamd/local.d/worker-proxy.inc
		cat <<EOF > /etc/rspamd/override.d/worker-proxy.inc
## Custom Generated Worker Proxy Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on `date`

bind_socket = "${WORKER_PROXY_LISTEN_IP}:${WORKER_PROXY_LISTEN_PORT}";
timeout = ${WORKER_PROXY_TIMEOUT};
milter=true;
upstream "local" {
  name = "localhost";
  default = true;
  hosts = "localhost:11333"
}
reject_message = "This message does not meet our delivery requirements";
spam_header = "${WORKER_PROXY_SPAM_HEADER}";
count = 1; # Do not spawn too many processes of this type
max_retries = 5; # How many times master is queried in case of failure
discard_on_reject = false; # Discard message instead of rejection
quarantine_on_reject = false; # Tell MTA to quarantine rejected messages
spam_header = "X-Spam"; # Use the specific spam header
reject_message = "Spam message rejected"; # Use custom rejection message
EOF
	fi
}

